/* ========================================================================== */
/* SALUD INTEGRAL CR – ESQUEMA LIMPIO/ORDENADO                                */
/* ========================================================================== */
/* Requisitos: ejecuta con un usuario con privilegios sobre el esquema.       */
/* Consejos: usa “Run Script (F5)” en SQL Developer/SQLcl para interpretar “/” */
/* ========================================================================== */

SET DEFINE OFF
SET SERVEROUTPUT ON SIZE UNLIMITED

/* ============================================================================
   1) TABLAS (BASE)
   ============================================================================ */

-- ESPECIALIDAD
CREATE TABLE ESPECIALIDAD (
  ID_ESPECIALIDAD NUMBER        PRIMARY KEY,
  NOMBRE          VARCHAR2(100) NOT NULL
);
/

-- DOCTOR
CREATE TABLE DOCTOR (
  ID_DOCTOR       NUMBER        PRIMARY KEY,
  NOMBRE          VARCHAR2(100) NOT NULL,
  TELEFONO        VARCHAR2(20),
  ID_ESPECIALIDAD NUMBER,
  CONSTRAINT FK_DOC_ESP FOREIGN KEY (ID_ESPECIALIDAD)
    REFERENCES ESPECIALIDAD(ID_ESPECIALIDAD)
);
/

-- PACIENTE
CREATE TABLE PACIENTE (
  ID_PACIENTE NUMBER        PRIMARY KEY,
  NOMBRE      VARCHAR2(100) NOT NULL,
  EMAIL       VARCHAR2(100) UNIQUE,
  TELEFONO    VARCHAR2(20),
  DIRECCION   VARCHAR2(255)
);
/

-- DISPONIBILIDAD (las horas se almacenan como DATE con solo hora)
CREATE TABLE DISPONIBILIDAD (
  ID_DISPONIBILIDAD NUMBER  PRIMARY KEY,
  ID_DOCTOR         NUMBER  NOT NULL,
  DIA_SEMANA        VARCHAR2(10),
  HORA_INICIO       DATE,
  HORA_FIN          DATE,
  CONSTRAINT FK_DISP_DOC FOREIGN KEY (ID_DOCTOR)
    REFERENCES DOCTOR(ID_DOCTOR)
);
/

-- CITA (FECHA y HORA almacenadas por separado)
CREATE TABLE CITA (
  ID_CITA     NUMBER        PRIMARY KEY,
  ID_PACIENTE NUMBER        NOT NULL,
  ID_DOCTOR   NUMBER        NOT NULL,
  FECHA       DATE          NOT NULL, -- solo fecha
  HORA        DATE          NOT NULL, -- solo hora
  ESTADO      VARCHAR2(20),           -- AGENDADA / CONFIRMADA / CANCELADA
  CONSTRAINT FK_CITA_PAC FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTE(ID_PACIENTE),
  CONSTRAINT FK_CITA_DOC FOREIGN KEY (ID_DOCTOR)   REFERENCES DOCTOR(ID_DOCTOR)
);
/

-- HISTORIAL MEDICO
CREATE TABLE HISTORIAL_MEDICO (
  ID_HISTORIAL NUMBER PRIMARY KEY,
  ID_PACIENTE  NUMBER,
  ID_CITA      NUMBER,
  DIAGNOSTICO  VARCHAR2(500),
  TRATAMIENTO  VARCHAR2(500),
  CONSTRAINT FK_HIST_PAC FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTE(ID_PACIENTE),
  CONSTRAINT FK_HIST_CIT FOREIGN KEY (ID_CITA)     REFERENCES CITA(ID_CITA)
);
/

-- PAGO
CREATE TABLE PAGO (
  ID_PAGO     NUMBER PRIMARY KEY,
  ID_CITA     NUMBER NOT NULL,
  MONTO       NUMBER(10,2),
  FECHA       DATE,
  METODO_PAGO VARCHAR2(50),
  CONSTRAINT FK_PAGO_CITA FOREIGN KEY (ID_CITA) REFERENCES CITA(ID_CITA)
);
/

-- USUARIO
CREATE TABLE USUARIO (
  ID_USUARIO     NUMBER        PRIMARY KEY,
  NOMBRE_USUARIO VARCHAR2(50)  UNIQUE NOT NULL,
  CONTRASENA     VARCHAR2(255) NOT NULL,
  TIPO_USUARIO   VARCHAR2(20)  -- ADMIN / PACIENTE / DOCTOR / RECEPCIONISTA, etc.
);
/

-- RECORDATORIO
CREATE TABLE RECORDATORIO (
  ID_RECORDATORIO NUMBER PRIMARY KEY,
  ID_CITA         NUMBER,
  MENSAJE         VARCHAR2(255),
  FECHA_ENVIO     DATE,
  CONSTRAINT FK_REC_CITA FOREIGN KEY (ID_CITA) REFERENCES CITA(ID_CITA)
);
/

-- AUDITORÍAS
CREATE TABLE AUDITORIA_PAGO (
  ID_AUDITORIA_PAGO NUMBER PRIMARY KEY,
  ID_PAGO           NUMBER,
  ACCION            VARCHAR2(50),
  FECHA_EVENTO      DATE,
  USUARIO_BD        VARCHAR2(50)
);
/

CREATE TABLE AUDITORIA_RECORDATORIO (
  ID_AUDITORIA_REC NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  ID_RECORDATORIO  NUMBER,
  ACCION           VARCHAR2(50),
  FECHA_EVENTO     DATE,
  USUARIO_BD       VARCHAR2(50)
);
/

 /* ============================================================================
    2) SECUENCIAS
    ============================================================================ */
CREATE SEQUENCE SEQ_ESPECIALIDAD   START WITH 1 INCREMENT BY 1;
/
CREATE SEQUENCE SEQ_DOCTOR         START WITH 1 INCREMENT BY 1;
/
CREATE SEQUENCE SEQ_PACIENTE       START WITH 1 INCREMENT BY 1;
/
CREATE SEQUENCE SEQ_DISPONIBILIDAD START WITH 1 INCREMENT BY 1;
/
CREATE SEQUENCE SEQ_CITA           START WITH 1 INCREMENT BY 1;
/
CREATE SEQUENCE SEQ_HISTORIAL      START WITH 1 INCREMENT BY 1;
/
CREATE SEQUENCE SEQ_PAGO           START WITH 1 INCREMENT BY 1;
/
CREATE SEQUENCE SEQ_USUARIO        START WITH 1 INCREMENT BY 1;
/
CREATE SEQUENCE SEQ_RECORDATORIO   START WITH 1 INCREMENT BY 1;
/
CREATE SEQUENCE SEQ_AUDITORIA_PAGO START WITH 1 INCREMENT BY 1;
/

 /* ============================================================================
    3) VISTAS (solo lecturas útiles para UI/reportes)
    ============================================================================ */
CREATE OR REPLACE VIEW V_CITAS AS
SELECT c.ID_CITA,
       p.NOMBRE AS NOMBRE_PACIENTE,
       d.NOMBRE AS NOMBRE_DOCTOR,
       e.NOMBRE AS ESPECIALIDAD,
       c.FECHA, c.HORA, c.ESTADO
  FROM CITA c
  JOIN PACIENTE p ON p.ID_PACIENTE = c.ID_PACIENTE
  JOIN DOCTOR   d ON d.ID_DOCTOR   = c.ID_DOCTOR
  LEFT JOIN ESPECIALIDAD e ON e.ID_ESPECIALIDAD = d.ID_ESPECIALIDAD
 ORDER BY p.NOMBRE, c.FECHA, c.HORA;
/

CREATE OR REPLACE VIEW V_HISTORIAL AS
SELECT h.ID_HISTORIAL, p.NOMBRE AS PACIENTE, c.FECHA,
       d.NOMBRE AS MEDICO, h.DIAGNOSTICO, h.TRATAMIENTO
  FROM HISTORIAL_MEDICO h
  JOIN PACIENTE p ON p.ID_PACIENTE = h.ID_PACIENTE
  JOIN CITA     c ON c.ID_CITA     = h.ID_CITA
  JOIN DOCTOR   d ON d.ID_DOCTOR   = c.ID_DOCTOR;
/

CREATE OR REPLACE VIEW V_PAGOS AS
SELECT pag.ID_PAGO, p.NOMBRE AS PACIENTE, pag.MONTO,
       pag.FECHA, pag.METODO_PAGO
  FROM PAGO pag
  JOIN CITA c   ON c.ID_CITA      = pag.ID_CITA
  JOIN PACIENTE p ON p.ID_PACIENTE = c.ID_PACIENTE;
/

CREATE OR REPLACE VIEW V_DISPONIBILIDAD_DOCTOR AS
SELECT d.ID_DISPONIBILIDAD, d.ID_DOCTOR, doc.NOMBRE AS DOCTOR,
       d.DIA_SEMANA, d.HORA_INICIO, d.HORA_FIN
  FROM DISPONIBILIDAD d
  JOIN DOCTOR doc ON doc.ID_DOCTOR = d.ID_DOCTOR;
/

CREATE OR REPLACE VIEW V_RECORDATORIOS_CITAS AS
SELECT r.ID_RECORDATORIO, c.ID_CITA, p.NOMBRE AS PACIENTE,
       c.FECHA, c.HORA, r.MENSAJE, r.FECHA_ENVIO
  FROM RECORDATORIO r
  JOIN CITA c      ON c.ID_CITA      = r.ID_CITA
  JOIN PACIENTE p  ON p.ID_PACIENTE  = c.ID_PACIENTE
  JOIN DOCTOR d    ON d.ID_DOCTOR    = c.ID_DOCTOR
  LEFT JOIN ESPECIALIDAD e ON e.ID_ESPECIALIDAD = d.ID_ESPECIALIDAD
 ORDER BY r.FECHA_ENVIO DESC;
/

CREATE OR REPLACE VIEW V_USUARIOS AS
SELECT u.ID_USUARIO, u.NOMBRE_USUARIO, u.TIPO_USUARIO,
       CASE WHEN u.TIPO_USUARIO = 'PACIENTE' THEN p.NOMBRE
            WHEN u.TIPO_USUARIO = 'DOCTOR'   THEN d.NOMBRE
       END AS NOMBRE_PERSONA
  FROM USUARIO u
  LEFT JOIN PACIENTE p ON p.ID_PACIENTE = u.ID_USUARIO
  LEFT JOIN DOCTOR   d ON d.ID_DOCTOR   = u.ID_USUARIO
 WHERE u.TIPO_USUARIO IN ('PACIENTE','DOCTOR')
 ORDER BY u.NOMBRE_USUARIO;
/

CREATE OR REPLACE VIEW V_ESPECIALIDADES AS
SELECT e.ID_ESPECIALIDAD, e.NOMBRE AS ESPECIALIDAD,
       COUNT(d.ID_DOCTOR) AS NUM_DOCTORES
  FROM ESPECIALIDAD e
  LEFT JOIN DOCTOR d ON d.ID_ESPECIALIDAD = e.ID_ESPECIALIDAD
 GROUP BY e.ID_ESPECIALIDAD, e.NOMBRE
 ORDER BY e.NOMBRE;
/

CREATE OR REPLACE VIEW V_DOCTORES_ESPECIALIDAD AS
SELECT d.ID_DOCTOR, d.NOMBRE AS DOCTOR, e.NOMBRE AS ESPECIALIDAD, d.TELEFONO
  FROM DOCTOR d
  LEFT JOIN ESPECIALIDAD e ON e.ID_ESPECIALIDAD = d.ID_ESPECIALIDAD
 ORDER BY d.NOMBRE;
/

CREATE OR REPLACE VIEW V_CITAS_POR_DOCTOR AS
SELECT d.ID_DOCTOR, d.NOMBRE AS DOCTOR,
       COUNT(c.ID_CITA) AS NUM_CITAS,
       SUM(CASE WHEN c.ESTADO = 'CONFIRMADA' THEN 1 ELSE 0 END) AS CITAS_CONFIRMADAS,
       SUM(CASE WHEN c.ESTADO = 'CANCELADA'  THEN 1 ELSE 0 END) AS CITAS_CANCELADAS
  FROM DOCTOR d
  LEFT JOIN CITA c ON c.ID_DOCTOR = d.ID_DOCTOR
 GROUP BY d.ID_DOCTOR, d.NOMBRE
 ORDER BY d.NOMBRE;
/

CREATE OR REPLACE VIEW V_PAGOS_PACIENTE AS
SELECT p.ID_PACIENTE, p.NOMBRE AS PACIENTE,
       COUNT(pg.ID_PAGO) AS NUM_PAGOS, NVL(SUM(pg.MONTO),0) AS TOTAL_PAGADO
  FROM PACIENTE p
  LEFT JOIN CITA c ON c.ID_PACIENTE = p.ID_PACIENTE
  LEFT JOIN PAGO pg ON pg.ID_CITA    = c.ID_CITA
 GROUP BY p.ID_PACIENTE, p.NOMBRE
 ORDER BY p.NOMBRE;
/

 /* ============================================================================
    4) TRIGGERS (validación de negocio)
    ============================================================================ */
-- Estado de CITA restringido
CREATE OR REPLACE TRIGGER TRG_VALIDAR_ESTADO_CITA
BEFORE INSERT OR UPDATE ON CITA
FOR EACH ROW
BEGIN
  IF :NEW.ESTADO IS NOT NULL
     AND :NEW.ESTADO NOT IN ('AGENDADA','CONFIRMADA','CANCELADA') THEN
    RAISE_APPLICATION_ERROR(-20001,'Estado inválido para la cita.');
  END IF;
END;
/

-- Teléfono de DOCTOR con mínimo de longitud
CREATE OR REPLACE TRIGGER TRG_VALIDAR_TELEFONO_DOCTOR
BEFORE INSERT OR UPDATE ON DOCTOR
FOR EACH ROW
BEGIN
  IF :NEW.TELEFONO IS NOT NULL AND LENGTH(:NEW.TELEFONO) < 8 THEN
    RAISE_APPLICATION_ERROR(-20020,'El teléfono debe tener al menos 8 dígitos.');
  END IF;
END;
/

-- Horario de DISPONIBILIDAD consistente
CREATE OR REPLACE TRIGGER TRG_VALIDAR_HORAS_DISPONIBILIDAD
BEFORE INSERT OR UPDATE ON DISPONIBILIDAD
FOR EACH ROW
BEGIN
  IF :NEW.HORA_FIN <= :NEW.HORA_INICIO THEN
    RAISE_APPLICATION_ERROR(-20010,'La hora de fin debe ser mayor que la hora de inicio.');
  END IF;
END;
/

 /* ============================================================================
    5) TRIGGERS (auditoría)
    ============================================================================ */
CREATE OR REPLACE TRIGGER TR_AUDITAR_PAGO
AFTER INSERT OR UPDATE OR DELETE ON PAGO
FOR EACH ROW
DECLARE
  v_accion VARCHAR2(50);
  v_idpago NUMBER;
BEGIN
  IF INSERTING THEN
    v_accion := 'INSERT';  v_idpago := :NEW.ID_PAGO;
  ELSIF UPDATING THEN
    v_accion := 'UPDATE';  v_idpago := :NEW.ID_PAGO;
  ELSE
    v_accion := 'DELETE';  v_idpago := :OLD.ID_PAGO;
  END IF;

  INSERT INTO AUDITORIA_PAGO(ID_AUDITORIA_PAGO,ID_PAGO,ACCION,FECHA_EVENTO,USUARIO_BD)
  VALUES(SEQ_AUDITORIA_PAGO.NEXTVAL,v_idpago,v_accion,SYSDATE,USER);
END;
/

CREATE OR REPLACE TRIGGER TRG_AUDITAR_RECORDATORIO
AFTER INSERT OR UPDATE OR DELETE ON RECORDATORIO
FOR EACH ROW
DECLARE
  v_accion VARCHAR2(50);
  v_id NUMBER;
BEGIN
  IF INSERTING THEN
    v_accion := 'INSERT';  v_id := :NEW.ID_RECORDATORIO;
  ELSIF UPDATING THEN
    v_accion := 'UPDATE';  v_id := :NEW.ID_RECORDATORIO;
  ELSE
    v_accion := 'DELETE';  v_id := :OLD.ID_RECORDATORIO;
  END IF;

  INSERT INTO AUDITORIA_RECORDATORIO(ID_RECORDATORIO,ACCION,FECHA_EVENTO,USUARIO_BD)
  VALUES (v_id, v_accion, SYSDATE, USER);
END;
/

 /* ============================================================================
    6) PAQUETES PRINCIPALES
    ============================================================================ */

-- ===== PKG_CITA =====
CREATE OR REPLACE PACKAGE PKG_CITA AS
  PROCEDURE sp_crear(
    p_id_paciente IN VARCHAR2, p_id_doctor IN VARCHAR2,
    p_fecha IN VARCHAR2, p_hora IN VARCHAR2, p_estado IN VARCHAR2,
    p_id IN OUT NUMBER);
  PROCEDURE sp_actualizar(
    p_id IN VARCHAR2, p_id_paciente IN VARCHAR2, p_id_doctor IN VARCHAR2,
    p_fecha IN VARCHAR2, p_hora IN VARCHAR2, p_estado IN VARCHAR2);
  PROCEDURE sp_eliminar(p_id IN VARCHAR2);
  PROCEDURE sp_listar(cur OUT SYS_REFCURSOR);
  PROCEDURE sp_obtener(p_id IN VARCHAR2, cur OUT SYS_REFCURSOR);
END PKG_CITA;
/

CREATE OR REPLACE PACKAGE BODY PKG_CITA AS
  FUNCTION to_num(p VARCHAR2) RETURN NUMBER IS n NUMBER;
  BEGIN
    IF p IS NULL OR TRIM(p) IS NULL THEN RETURN NULL; END IF;
    BEGIN n := TO_NUMBER(TRIM(p)); RETURN n; EXCEPTION WHEN VALUE_ERROR THEN RETURN NULL; END;
  END;

  FUNCTION norm_fecha(p VARCHAR2) RETURN DATE IS v DATE;
  BEGIN
    BEGIN v := TO_DATE(p,'YYYY-MM-DD'); RETURN v; EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN v := TO_DATE(p,'DD/MM/YYYY'); RETURN v; EXCEPTION WHEN OTHERS THEN NULL; END;
    RETURN TO_DATE(p);
  END;

  FUNCTION norm_hora_date(p VARCHAR2) RETURN DATE IS v DATE;
  BEGIN
    IF p IS NULL OR TRIM(p) IS NULL THEN RETURN NULL; END IF;
    BEGIN v := TO_DATE(p,'HH24:MI'); RETURN v; EXCEPTION WHEN OTHERS THEN NULL; END;
  END;

  PROCEDURE sp_crear_cita(p_id_paciente IN NUMBER,p_id_doctor IN NUMBER,
                          p_fecha IN VARCHAR2,p_hora IN VARCHAR2,p_estado IN VARCHAR2,
                          p_id IN OUT NUMBER) IS
    v_fecha DATE := norm_fecha(p_fecha); v_hora DATE := norm_hora_date(p_hora);
  BEGIN
    IF p_id IS NULL THEN SELECT SEQ_CITA.NEXTVAL INTO p_id FROM DUAL; END IF;
    INSERT INTO CITA(ID_CITA,ID_PACIENTE,ID_DOCTOR,FECHA,HORA,ESTADO)
    VALUES(p_id,p_id_paciente,p_id_doctor,v_fecha,v_hora,p_estado);
  END;

  PROCEDURE sp_actualizar_cita(p_id IN NUMBER,p_id_paciente IN NUMBER,p_id_doctor IN NUMBER,
                               p_fecha IN VARCHAR2,p_hora IN VARCHAR2,p_estado IN VARCHAR2) IS
    v_fecha DATE := norm_fecha(p_fecha); v_hora DATE := norm_hora_date(p_hora);
  BEGIN
    UPDATE CITA
       SET ID_PACIENTE=p_id_paciente, ID_DOCTOR=p_id_doctor,
           FECHA=v_fecha, HORA=v_hora, ESTADO=p_estado
     WHERE ID_CITA=p_id;
  END;

  PROCEDURE sp_eliminar_cita(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM CITA WHERE ID_CITA=p_id;
  END;

  PROCEDURE sp_listar_citas(cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN cur FOR
      SELECT ID_CITA, ID_PACIENTE, ID_DOCTOR,
             TO_CHAR(FECHA,'YYYY-MM-DD') AS FECHA,
             TO_CHAR(HORA,'HH24:MI')     AS HORA,
             ESTADO
        FROM CITA
       ORDER BY ID_CITA;
  END;

  PROCEDURE sp_obtener_cita(p_id IN NUMBER, cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN cur FOR
      SELECT ID_CITA, ID_PACIENTE, ID_DOCTOR,
             TO_CHAR(FECHA,'YYYY-MM-DD') AS FECHA,
             TO_CHAR(HORA,'HH24:MI')     AS HORA,
             ESTADO
        FROM CITA
       WHERE ID_CITA = p_id;
  END;

  -- Wrappers para UI (reciben VARCHAR2)
  PROCEDURE sp_crear(p_id_paciente IN VARCHAR2,p_id_doctor IN VARCHAR2,
                     p_fecha IN VARCHAR2,p_hora IN VARCHAR2,p_estado IN VARCHAR2,
                     p_id IN OUT NUMBER) IS
  BEGIN
    sp_crear_cita(to_num(p_id_paciente),to_num(p_id_doctor),p_fecha,p_hora,p_estado,p_id);
  END;

  PROCEDURE sp_actualizar(p_id IN VARCHAR2,p_id_paciente IN VARCHAR2,p_id_doctor IN VARCHAR2,
                          p_fecha IN VARCHAR2,p_hora IN VARCHAR2,p_estado IN VARCHAR2) IS
  BEGIN
    sp_actualizar_cita(to_num(p_id),to_num(p_id_paciente),to_num(p_id_doctor),p_fecha,p_hora,p_estado);
  END;

  PROCEDURE sp_eliminar(p_id IN VARCHAR2) IS
  BEGIN
    sp_eliminar_cita(to_num(p_id));
  END;

  PROCEDURE sp_listar(cur OUT SYS_REFCURSOR) IS
  BEGIN
    sp_listar_citas(cur);
  END;

  PROCEDURE sp_obtener(p_id IN VARCHAR2, cur OUT SYS_REFCURSOR) IS
  BEGIN
    sp_obtener_cita(to_num(p_id),cur);
  END;
END PKG_CITA;
/

-- ===== PKG_DOCTOR =====
CREATE OR REPLACE PACKAGE PKG_DOCTOR AS
  PROCEDURE sp_crear_doctor(p_nombre IN VARCHAR2,p_telefono IN VARCHAR2,p_id_especialidad IN NUMBER,p_id IN OUT NUMBER);
  PROCEDURE sp_actualizar_doctor(p_id IN NUMBER,p_nombre IN VARCHAR2,p_telefono IN VARCHAR2,p_id_especialidad IN NUMBER);
  PROCEDURE sp_eliminar_doctor(p_id IN NUMBER);
  PROCEDURE sp_listar_doctores(cur OUT SYS_REFCURSOR);
  PROCEDURE sp_listar_doctores_especialidad(p_id_especialidad IN NUMBER, cur OUT SYS_REFCURSOR);
END PKG_DOCTOR;
/

CREATE OR REPLACE PACKAGE BODY PKG_DOCTOR AS
  PROCEDURE sp_crear_doctor(p_nombre IN VARCHAR2,p_telefono IN VARCHAR2,p_id_especialidad IN NUMBER,p_id IN OUT NUMBER) IS
  BEGIN
    IF p_id IS NULL THEN SELECT SEQ_DOCTOR.NEXTVAL INTO p_id FROM DUAL; END IF;
    INSERT INTO DOCTOR(ID_DOCTOR,NOMBRE,TELEFONO,ID_ESPECIALIDAD)
    VALUES(p_id,p_nombre,p_telefono,p_id_especialidad);
  END;

  PROCEDURE sp_actualizar_doctor(p_id IN NUMBER,p_nombre IN VARCHAR2,p_telefono IN VARCHAR2,p_id_especialidad IN NUMBER) IS
  BEGIN
    UPDATE DOCTOR SET NOMBRE=p_nombre, TELEFONO=p_telefono, ID_ESPECIALIDAD=p_id_especialidad
     WHERE ID_DOCTOR=p_id;
  END;

  PROCEDURE sp_eliminar_doctor(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM DOCTOR WHERE ID_DOCTOR=p_id;
  END;

  PROCEDURE sp_listar_doctores(cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN cur FOR
      SELECT d.ID_DOCTOR,d.NOMBRE,d.TELEFONO,d.ID_ESPECIALIDAD, e.NOMBRE AS ESPECIALIDAD
        FROM DOCTOR d LEFT JOIN ESPECIALIDAD e ON e.ID_ESPECIALIDAD=d.ID_ESPECIALIDAD
       ORDER BY d.ID_DOCTOR;
  END;

  PROCEDURE sp_listar_doctores_especialidad(p_id_especialidad IN NUMBER, cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN cur FOR
      SELECT ID_DOCTOR,NOMBRE,TELEFONO,ID_ESPECIALIDAD
        FROM DOCTOR
       WHERE ID_ESPECIALIDAD=p_id_especialidad
       ORDER BY ID_DOCTOR;
  END;
END PKG_DOCTOR;
/

-- ===== PKG_DISPONIBILIDAD =====
CREATE OR REPLACE PACKAGE PKG_DISPONIBILIDAD AS
  PROCEDURE sp_crear_disponibilidad (p_id IN OUT NUMBER,p_doctor IN NUMBER,p_dia IN VARCHAR2,p_inicio IN DATE,p_fin IN DATE);
  PROCEDURE sp_actualizar_disponibilidad (p_id IN NUMBER,p_doctor IN NUMBER,p_dia IN VARCHAR2,p_inicio IN DATE,p_fin IN DATE);
  PROCEDURE sp_eliminar_disponibilidad (p_id IN NUMBER);
  PROCEDURE sp_listar_disponibilidad (p_cursor OUT SYS_REFCURSOR);
END PKG_DISPONIBILIDAD;
/

CREATE OR REPLACE PACKAGE BODY PKG_DISPONIBILIDAD AS
  PROCEDURE sp_crear_disponibilidad(p_id IN OUT NUMBER,p_doctor IN NUMBER,p_dia IN VARCHAR2,p_inicio IN DATE,p_fin IN DATE) AS
  BEGIN
    IF p_id IS NULL THEN SELECT SEQ_DISPONIBILIDAD.NEXTVAL INTO p_id FROM DUAL; END IF;
    INSERT INTO DISPONIBILIDAD(ID_DISPONIBILIDAD,ID_DOCTOR,DIA_SEMANA,HORA_INICIO,HORA_FIN)
    VALUES(p_id,p_doctor,p_dia,p_inicio,p_fin);
  END;

  PROCEDURE sp_actualizar_disponibilidad(p_id IN NUMBER,p_doctor IN NUMBER,p_dia IN VARCHAR2,p_inicio IN DATE,p_fin IN DATE) AS
  BEGIN
    UPDATE DISPONIBILIDAD
       SET ID_DOCTOR=p_doctor,DIA_SEMANA=p_dia,HORA_INICIO=p_inicio,HORA_FIN=p_fin
     WHERE ID_DISPONIBILIDAD=p_id;
  END;

  PROCEDURE sp_eliminar_disponibilidad(p_id IN NUMBER) AS
  BEGIN
    DELETE FROM DISPONIBILIDAD WHERE ID_DISPONIBILIDAD=p_id;
  END;

  PROCEDURE sp_listar_disponibilidad(p_cursor OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN p_cursor FOR
      SELECT ID_DISPONIBILIDAD, ID_DOCTOR, DIA_SEMANA,
             TO_CHAR(HORA_INICIO,'HH24:MI') AS HORA_INICIO,
             TO_CHAR(HORA_FIN,'HH24:MI')    AS HORA_FIN
        FROM DISPONIBILIDAD
       ORDER BY DIA_SEMANA, HORA_INICIO;
  END;
END PKG_DISPONIBILIDAD;
/

-- ===== PKG_PACIENTE =====
CREATE OR REPLACE PACKAGE PKG_PACIENTE AS
  PROCEDURE sp_crear(p_id OUT NUMBER,p_nombre IN VARCHAR2,p_email IN VARCHAR2,p_tel IN VARCHAR2,p_dir IN VARCHAR2);
  PROCEDURE sp_actualizar(p_id IN NUMBER,p_nombre IN VARCHAR2,p_email IN VARCHAR2,p_tel IN VARCHAR2,p_dir IN VARCHAR2);
  PROCEDURE sp_eliminar(p_id IN NUMBER);
  PROCEDURE sp_listar(p_cur OUT SYS_REFCURSOR);
  PROCEDURE sp_obtener(p_id IN NUMBER,p_cur OUT SYS_REFCURSOR);
END PKG_PACIENTE;
/

CREATE OR REPLACE PACKAGE BODY PKG_PACIENTE AS
  PROCEDURE sp_crear(p_id OUT NUMBER,p_nombre IN VARCHAR2,p_email IN VARCHAR2,p_tel IN VARCHAR2,p_dir IN VARCHAR2) IS
  BEGIN
    SELECT SEQ_PACIENTE.NEXTVAL INTO p_id FROM DUAL;
    INSERT INTO PACIENTE(ID_PACIENTE,NOMBRE,EMAIL,TELEFONO,DIRECCION)
    VALUES(p_id,p_nombre,p_email,p_tel,p_dir);
  END;

  PROCEDURE sp_actualizar(p_id IN NUMBER,p_nombre IN VARCHAR2,p_email IN VARCHAR2,p_tel IN VARCHAR2,p_dir IN VARCHAR2) IS
  BEGIN
    UPDATE PACIENTE SET NOMBRE=p_nombre,EMAIL=p_email,TELEFONO=p_tel,DIRECCION=p_dir
     WHERE ID_PACIENTE=p_id;
  END;

  PROCEDURE sp_eliminar(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM PACIENTE WHERE ID_PACIENTE=p_id;
  END;

  PROCEDURE sp_listar(p_cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_cur FOR
      SELECT ID_PACIENTE,NOMBRE,EMAIL,TELEFONO,DIRECCION
        FROM PACIENTE
       ORDER BY ID_PACIENTE;
  END;

  PROCEDURE sp_obtener(p_id IN NUMBER,p_cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_cur FOR
      SELECT ID_PACIENTE,NOMBRE,EMAIL,TELEFONO,DIRECCION
        FROM PACIENTE
       WHERE ID_PACIENTE=p_id;
  END;
END PKG_PACIENTE;
/

-- ===== PKG_ESPECIALIDAD =====
CREATE OR REPLACE PACKAGE PKG_ESPECIALIDAD AS
  PROCEDURE sp_crear(p_id IN OUT NUMBER,p_nombre IN VARCHAR2);
  PROCEDURE sp_actualizar(p_id IN NUMBER,p_nombre IN VARCHAR2);
  PROCEDURE sp_eliminar(p_id IN NUMBER);
  PROCEDURE sp_listar(p_cur OUT SYS_REFCURSOR);
END PKG_ESPECIALIDAD;
/

CREATE OR REPLACE PACKAGE BODY PKG_ESPECIALIDAD AS
  PROCEDURE sp_crear(p_id IN OUT NUMBER,p_nombre IN VARCHAR2) IS
  BEGIN
    IF p_id IS NULL THEN SELECT SEQ_ESPECIALIDAD.NEXTVAL INTO p_id FROM DUAL; END IF;
    INSERT INTO ESPECIALIDAD(ID_ESPECIALIDAD,NOMBRE) VALUES(p_id,p_nombre);
  END;

  PROCEDURE sp_actualizar(p_id IN NUMBER,p_nombre IN VARCHAR2) IS
  BEGIN
    UPDATE ESPECIALIDAD SET NOMBRE=p_nombre WHERE ID_ESPECIALIDAD=p_id;
  END;

  PROCEDURE sp_eliminar(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM ESPECIALIDAD WHERE ID_ESPECIALIDAD=p_id;
  END;

  PROCEDURE sp_listar(p_cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_cur FOR SELECT ID_ESPECIALIDAD,NOMBRE FROM ESPECIALIDAD ORDER BY NOMBRE;
  END;
END PKG_ESPECIALIDAD;
/

-- ===== PKG_PAGO =====
CREATE OR REPLACE PACKAGE PKG_PAGO AS
  PROCEDURE sp_crear_pago(p_id_cita IN NUMBER,p_monto IN NUMBER,p_fecha IN VARCHAR2,p_metodo IN VARCHAR2,p_id IN OUT NUMBER);
  PROCEDURE sp_actualizar_pago(p_id IN NUMBER,p_monto IN NUMBER,p_fecha IN VARCHAR2,p_metodo IN VARCHAR2);
  PROCEDURE sp_eliminar_pago(p_id IN NUMBER);
  PROCEDURE sp_listar_pagos(cur OUT SYS_REFCURSOR);
  PROCEDURE sp_obtener_pago(p_id IN NUMBER,cur OUT SYS_REFCURSOR);
END PKG_PAGO;
/

CREATE OR REPLACE PACKAGE BODY PKG_PAGO AS
  FUNCTION norm_fecha(p VARCHAR2) RETURN DATE IS v DATE;
  BEGIN
    BEGIN RETURN TO_DATE(p,'YYYY-MM-DD'); EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN RETURN TO_DATE(p,'DD/MM/YYYY'); EXCEPTION WHEN OTHERS THEN NULL; END;
    RETURN TO_DATE(p);
  END;

  PROCEDURE sp_crear_pago(p_id_cita IN NUMBER,p_monto IN NUMBER,p_fecha IN VARCHAR2,p_metodo IN VARCHAR2,p_id IN OUT NUMBER) IS
    v_fecha DATE := norm_fecha(p_fecha);
  BEGIN
    IF p_id IS NULL THEN SELECT SEQ_PAGO.NEXTVAL INTO p_id FROM DUAL; END IF;
    INSERT INTO PAGO(ID_PAGO,ID_CITA,MONTO,FECHA,METODO_PAGO)
    VALUES(p_id,p_id_cita,p_monto,v_fecha,p_metodo);
  END;

  PROCEDURE sp_actualizar_pago(p_id IN NUMBER,p_monto IN NUMBER,p_fecha IN VARCHAR2,p_metodo IN VARCHAR2) IS
    v_fecha DATE := norm_fecha(p_fecha);
  BEGIN
    UPDATE PAGO SET MONTO=p_monto, FECHA=v_fecha, METODO_PAGO=p_metodo WHERE ID_PAGO=p_id;
  END;

  PROCEDURE sp_eliminar_pago(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM PAGO WHERE ID_PAGO=p_id;
  END;

  PROCEDURE sp_listar_pagos(cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN cur FOR
      SELECT ID_PAGO, ID_CITA, MONTO, TO_CHAR(FECHA,'YYYY-MM-DD') AS FECHA, METODO_PAGO
        FROM PAGO
       ORDER BY ID_PAGO;
  END;

  PROCEDURE sp_obtener_pago(p_id IN NUMBER,cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN cur FOR
      SELECT ID_PAGO, ID_CITA, MONTO, TO_CHAR(FECHA,'YYYY-MM-DD') AS FECHA, METODO_PAGO
        FROM PAGO
       WHERE ID_PAGO=p_id;
  END;
END PKG_PAGO;
/

-- ===== PKG_USUARIO =====
CREATE OR REPLACE PACKAGE PKG_USUARIO AS
  PROCEDURE sp_cambiar_clave(p_id IN NUMBER,p_nueva IN VARCHAR2);
  PROCEDURE sp_cambiar_tipo(p_id IN NUMBER,p_tipo IN VARCHAR2);
  PROCEDURE sp_buscar_por_nombre(p_nombre IN VARCHAR2,p_cur OUT SYS_REFCURSOR);
END PKG_USUARIO;
/

CREATE OR REPLACE PACKAGE BODY PKG_USUARIO AS
  PROCEDURE sp_cambiar_clave(p_id IN NUMBER,p_nueva IN VARCHAR2) IS
  BEGIN
    UPDATE USUARIO SET CONTRASENA=p_nueva WHERE ID_USUARIO=p_id;
  END;

  PROCEDURE sp_cambiar_tipo(p_id IN NUMBER,p_tipo IN VARCHAR2) IS
  BEGIN
    UPDATE USUARIO SET TIPO_USUARIO=p_tipo WHERE ID_USUARIO=p_id;
  END;

  PROCEDURE sp_buscar_por_nombre(p_nombre IN VARCHAR2,p_cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_cur FOR
      SELECT ID_USUARIO,NOMBRE_USUARIO,TIPO_USUARIO
        FROM USUARIO
       WHERE UPPER(NOMBRE_USUARIO) LIKE UPPER('%'||p_nombre||'%')
       ORDER BY NOMBRE_USUARIO;
  END;
END PKG_USUARIO;
/

-- ===== PKG_RECORDATORIO =====
CREATE OR REPLACE PACKAGE PKG_RECORDATORIO AS
  PROCEDURE sp_crear_recordatorio(p_id_cita IN NUMBER,p_mensaje IN VARCHAR2,p_fecha IN VARCHAR2,p_id IN OUT NUMBER);
  PROCEDURE sp_reprogramar(p_id IN NUMBER,p_fecha IN VARCHAR2);
  PROCEDURE sp_cancelar(p_id IN NUMBER);
  PROCEDURE sp_listar(cur OUT SYS_REFCURSOR);
END PKG_RECORDATORIO;
/

CREATE OR REPLACE PACKAGE BODY PKG_RECORDATORIO AS
  FUNCTION norm_fecha(p VARCHAR2) RETURN DATE IS v DATE;
  BEGIN
    BEGIN RETURN TO_DATE(p,'YYYY-MM-DD'); EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN RETURN TO_DATE(p,'DD/MM/YYYY'); EXCEPTION WHEN OTHERS THEN NULL; END;
    RETURN TO_DATE(p);
  END;

  PROCEDURE sp_crear_recordatorio(p_id_cita IN NUMBER,p_mensaje IN VARCHAR2,p_fecha IN VARCHAR2,p_id IN OUT NUMBER) IS
    v_fecha DATE := norm_fecha(p_fecha);
  BEGIN
    IF p_id IS NULL THEN SELECT SEQ_RECORDATORIO.NEXTVAL INTO p_id FROM DUAL; END IF;
    INSERT INTO RECORDATORIO(ID_RECORDATORIO,ID_CITA,MENSAJE,FECHA_ENVIO)
    VALUES(p_id,p_id_cita,p_mensaje,v_fecha);
  END;

  PROCEDURE sp_reprogramar(p_id IN NUMBER,p_fecha IN VARCHAR2) IS
    v_fecha DATE := norm_fecha(p_fecha);
  BEGIN
    UPDATE RECORDATORIO SET FECHA_ENVIO=v_fecha WHERE ID_RECORDATORIO=p_id;
  END;

  PROCEDURE sp_cancelar(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM RECORDATORIO WHERE ID_RECORDATORIO=p_id;
  END;

  PROCEDURE sp_listar(cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN cur FOR
      SELECT ID_RECORDATORIO, ID_CITA, MENSAJE, TO_CHAR(FECHA_ENVIO,'YYYY-MM-DD') AS FECHA_ENVIO
        FROM RECORDATORIO
       ORDER BY ID_RECORDATORIO;
  END;
END PKG_RECORDATORIO;
/

-- ===== PKG_HISTORIAL =====
CREATE OR REPLACE PACKAGE PKG_HISTORIAL AS
  PROCEDURE sp_crear(p_id IN OUT NUMBER,p_paciente IN NUMBER,p_cita IN NUMBER,p_dx IN VARCHAR2,p_tx IN VARCHAR2);
  PROCEDURE sp_actualizar(p_id IN NUMBER,p_dx IN VARCHAR2,p_tx IN VARCHAR2);
  PROCEDURE sp_eliminar(p_id IN NUMBER);
  PROCEDURE sp_listar(p_cur OUT SYS_REFCURSOR);
END PKG_HISTORIAL;
/

CREATE OR REPLACE PACKAGE BODY PKG_HISTORIAL AS
  PROCEDURE sp_crear(p_id IN OUT NUMBER,p_paciente IN NUMBER,p_cita IN NUMBER,p_dx IN VARCHAR2,p_tx IN VARCHAR2) IS
  BEGIN
    IF p_id IS NULL THEN SELECT SEQ_HISTORIAL.NEXTVAL INTO p_id FROM DUAL; END IF;
    INSERT INTO HISTORIAL_MEDICO(ID_HISTORIAL,ID_PACIENTE,ID_CITA,DIAGNOSTICO,TRATAMIENTO)
    VALUES(p_id,p_paciente,p_cita,p_dx,p_tx);
  END;

  PROCEDURE sp_actualizar(p_id IN NUMBER,p_dx IN VARCHAR2,p_tx IN VARCHAR2) IS
  BEGIN
    UPDATE HISTORIAL_MEDICO SET DIAGNOSTICO=p_dx, TRATAMIENTO=p_tx WHERE ID_HISTORIAL=p_id;
  END;

  PROCEDURE sp_eliminar(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM HISTORIAL_MEDICO WHERE ID_HISTORIAL=p_id;
  END;

  PROCEDURE sp_listar(p_cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_cur FOR SELECT * FROM HISTORIAL_MEDICO ORDER BY ID_HISTORIAL DESC;
  END;
END PKG_HISTORIAL;
/

-- ===== PKG_REPORTES =====
CREATE OR REPLACE PACKAGE PKG_REPORTES AS
  PROCEDURE sp_reporte_resumen(p_cur OUT SYS_REFCURSOR);
  PROCEDURE sp_reporte_doctor(p_id_doctor IN NUMBER,p_cur OUT SYS_REFCURSOR);
  PROCEDURE sp_reporte_paciente(p_id_paciente IN NUMBER,p_cur OUT SYS_REFCURSOR);
END PKG_REPORTES;
/

CREATE OR REPLACE PACKAGE BODY PKG_REPORTES AS
  PROCEDURE sp_reporte_resumen(p_cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_cur FOR
      SELECT (SELECT COUNT(*) FROM PACIENTE) AS TOTAL_PACIENTES,
             (SELECT COUNT(*) FROM DOCTOR)   AS TOTAL_DOCTORES,
             (SELECT COUNT(*) FROM CITA)     AS TOTAL_CITAS,
             (SELECT NVL(SUM(MONTO),0) FROM PAGO) AS TOTAL_PAGOS
        FROM DUAL;
  END;

  PROCEDURE sp_reporte_doctor(p_id_doctor IN NUMBER,p_cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_cur FOR
      SELECT c.ID_CITA, c.FECHA, c.HORA, c.ESTADO, p.NOMBRE AS PACIENTE
        FROM CITA c JOIN PACIENTE p ON p.ID_PACIENTE=c.ID_PACIENTE
       WHERE c.ID_DOCTOR=p_id_doctor
       ORDER BY c.FECHA, c.HORA;
  END;

  PROCEDURE sp_reporte_paciente(p_id_paciente IN NUMBER,p_cur OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_cur FOR
      SELECT c.ID_CITA, c.FECHA, c.HORA, d.NOMBRE AS DOCTOR, c.ESTADO
        FROM CITA c JOIN DOCTOR d ON d.ID_DOCTOR=c.ID_DOCTOR
       WHERE c.ID_PACIENTE=p_id_paciente
       ORDER BY c.FECHA DESC, c.HORA DESC;
  END;
END PKG_REPORTES;
/

 /* ============================================================================
    7) PROCEDIMIENTOS “SP_*” (compatibilidad con tu app)
    ============================================================================ */

-- PAGOS
CREATE OR REPLACE PROCEDURE SP_OBTENER_PAGOS(p_resultado OUT SYS_REFCURSOR) AS
BEGIN
  OPEN p_resultado FOR
    SELECT P.ID_PAGO, P.ID_CITA, PAC.NOMBRE AS PACIENTE, P.MONTO,
           TO_CHAR(P.FECHA,'YYYY-MM-DD') AS FECHA, P.METODO_PAGO
      FROM PAGO P
      JOIN CITA C   ON C.ID_CITA = P.ID_CITA
      JOIN PACIENTE PAC ON PAC.ID_PACIENTE = C.ID_PACIENTE
     ORDER BY P.FECHA DESC;
END;
/

CREATE OR REPLACE PROCEDURE SP_OBTENER_PAGO_POR_ID(p_id_pago IN PAGO.ID_PAGO%TYPE, p_resultado OUT SYS_REFCURSOR) AS
BEGIN
  OPEN p_resultado FOR SELECT * FROM PAGO WHERE ID_PAGO = p_id_pago;
END;
/

CREATE OR REPLACE PROCEDURE SP_CREAR_PAGO(
  p_id_pago IN OUT PAGO.ID_PAGO%TYPE,
  p_id_cita IN PAGO.ID_CITA%TYPE,
  p_monto   IN PAGO.MONTO%TYPE,
  p_fecha   IN DATE,
  p_metodo_pago IN PAGO.METODO_PAGO%TYPE,
  p_estado OUT VARCHAR2
) AS
BEGIN
  IF p_id_pago IS NULL THEN SELECT SEQ_PAGO.NEXTVAL INTO p_id_pago FROM DUAL; END IF;
  INSERT INTO PAGO(ID_PAGO,ID_CITA,MONTO,FECHA,METODO_PAGO)
  VALUES(p_id_pago,p_id_cita,p_monto,p_fecha,p_metodo_pago);
  p_estado := 'OK';
EXCEPTION
  WHEN OTHERS THEN p_estado := 'ERROR: '||SQLERRM;
END;
/

CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_PAGO(
  p_id_pago IN PAGO.ID_PAGO%TYPE,
  p_monto   IN PAGO.MONTO%TYPE,
  p_fecha   IN DATE,
  p_metodo_pago IN PAGO.METODO_PAGO%TYPE,
  p_estado OUT VARCHAR2
) AS
BEGIN
  UPDATE PAGO SET MONTO=p_monto, FECHA=p_fecha, METODO_PAGO=p_metodo_pago
   WHERE ID_PAGO=p_id_pago;
  p_estado := CASE WHEN SQL%ROWCOUNT=0 THEN 'NO EXISTE EL REGISTRO' ELSE 'OK' END;
EXCEPTION
  WHEN OTHERS THEN p_estado := 'ERROR: '||SQLERRM;
END;
/

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_PAGO(
  p_id_pago IN PAGO.ID_PAGO%TYPE, p_estado OUT VARCHAR2
) AS
BEGIN
  DELETE FROM PAGO WHERE ID_PAGO=p_id_pago;
  p_estado := CASE WHEN SQL%ROWCOUNT=0 THEN 'NO EXISTE EL REGISTRO' ELSE 'OK' END;
EXCEPTION
  WHEN OTHERS THEN p_estado := 'ERROR: '||SQLERRM;
END;
/

-- USUARIO (IDs y creación)
CREATE OR REPLACE PROCEDURE SP_GENERAR_ID_USUARIO(p_id OUT NUMBER) AS
BEGIN
  SELECT SEQ_USUARIO.NEXTVAL INTO p_id FROM DUAL;
END;
/

CREATE OR REPLACE PROCEDURE SP_CREAR_USUARIO(
  p_usuario IN VARCHAR2, p_contrasena IN VARCHAR2, p_tipo IN VARCHAR2, p_id IN OUT NUMBER
) AS
BEGIN
  IF p_id IS NULL THEN SELECT SEQ_USUARIO.NEXTVAL INTO p_id FROM DUAL; END IF;
  INSERT INTO USUARIO(ID_USUARIO,NOMBRE_USUARIO,CONTRASENA,TIPO_USUARIO)
  VALUES(p_id,p_usuario,p_contrasena,p_tipo);
END;
/

-- Otras utilidades de IDs
CREATE OR REPLACE PROCEDURE SP_GENERAR_ID_PACIENTE(p_id OUT NUMBER) AS
BEGIN
  SELECT SEQ_PACIENTE.NEXTVAL INTO p_id FROM DUAL;
END;
/

CREATE OR REPLACE PROCEDURE SP_GENERAR_ID_ESPECIALIDAD(p_id OUT NUMBER) AS
BEGIN
  SELECT SEQ_ESPECIALIDAD.NEXTVAL INTO p_id FROM DUAL;
END;
/

CREATE OR REPLACE PROCEDURE SP_GENERAR_ID_HISTORIAL(p_id OUT NUMBER) AS
BEGIN
  SELECT SEQ_HISTORIAL.NEXTVAL INTO p_id FROM DUAL;
END;
/

-- Cancelar citas pasadas automáticamente (helper)
CREATE OR REPLACE PROCEDURE SP_CANCELAR_CITAS_PASADAS AS
BEGIN
  UPDATE CITA
     SET ESTADO='CANCELADA'
   WHERE ESTADO='AGENDADA'
     AND ( TRUNC(FECHA) < TRUNC(SYSDATE)
        OR (TRUNC(FECHA) = TRUNC(SYSDATE) AND TO_CHAR(HORA,'HH24:MI') <= TO_CHAR(SYSDATE,'HH24:MI')) );
END;
/

 /* ============================================================================
    8) FUNCIONES (consultas rápidas)
    ============================================================================ */
CREATE OR REPLACE FUNCTION FN_TOTAL_PAGOS_POR_PACIENTE(p_id_paciente IN NUMBER) RETURN NUMBER IS v_total NUMBER;
BEGIN
  SELECT NVL(SUM(p.MONTO),0) INTO v_total
    FROM PAGO p JOIN CITA c ON c.ID_CITA=p.ID_CITA
   WHERE c.ID_PACIENTE=p_id_paciente;
  RETURN v_total;
END;
/

CREATE OR REPLACE FUNCTION FN_EXISTE_PACIENTE(p_id IN NUMBER) RETURN NUMBER IS v_cnt NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM PACIENTE WHERE ID_PACIENTE=p_id;
  RETURN CASE WHEN v_cnt>0 THEN 1 ELSE 0 END;
END;
/

CREATE OR REPLACE FUNCTION FN_ES_EMAIL_VALIDO(p_email IN VARCHAR2) RETURN NUMBER IS
BEGIN
  RETURN CASE WHEN REGEXP_LIKE(p_email,'^[^@]+@[^@]+\.[^@]+$') THEN 1 ELSE 0 END;
END;
/

CREATE OR REPLACE FUNCTION FN_ESTADO_CITA_VALIDO(p_estado IN VARCHAR2) RETURN NUMBER IS
BEGIN
  RETURN CASE WHEN UPPER(p_estado) IN ('AGENDADA','CONFIRMADA','CANCELADA') THEN 1 ELSE 0 END;
END;
/

CREATE OR REPLACE FUNCTION FN_GET_NOMBRE_ESPECIALIDAD(p_id IN NUMBER) RETURN VARCHAR2 IS v_nom ESPECIALIDAD.NOMBRE%TYPE;
BEGIN
  SELECT NOMBRE INTO v_nom FROM ESPECIALIDAD WHERE ID_ESPECIALIDAD=p_id;
  RETURN v_nom;
EXCEPTION WHEN NO_DATA_FOUND THEN RETURN NULL;
END;
/

CREATE OR REPLACE FUNCTION FN_ULTIMA_FECHA_HISTORIAL(p_id_paciente IN NUMBER) RETURN DATE IS v_fecha DATE;
BEGIN
  SELECT MAX(c.FECHA) INTO v_fecha
    FROM HISTORIAL_MEDICO h JOIN CITA c ON c.ID_CITA=h.ID_CITA
   WHERE h.ID_PACIENTE=p_id_paciente;
  RETURN v_fecha;
EXCEPTION WHEN NO_DATA_FOUND THEN RETURN NULL;
END;
/

CREATE OR REPLACE FUNCTION FN_NUM_CITAS_POR_DOCTOR(p_id_doctor IN NUMBER) RETURN NUMBER IS v_cnt NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM CITA WHERE ID_DOCTOR=p_id_doctor;
  RETURN v_cnt;
END;
/

CREATE OR REPLACE FUNCTION FN_CITAS_DOCTOR_RANGO(p_id_doctor IN NUMBER,p_fi IN DATE,p_ff IN DATE) RETURN NUMBER IS v_cnt NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM CITA WHERE ID_DOCTOR=p_id_doctor AND FECHA BETWEEN p_fi AND p_ff;
  RETURN v_cnt;
END;
/

CREATE OR REPLACE FUNCTION FN_DOCTOR_TIENE_DISPONIBILIDAD(p_id_doctor IN NUMBER,p_dia IN VARCHAR2) RETURN NUMBER IS v_cnt NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM DISPONIBILIDAD WHERE ID_DOCTOR=p_id_doctor AND UPPER(DIA_SEMANA)=UPPER(p_dia);
  RETURN CASE WHEN v_cnt>0 THEN 1 ELSE 0 END;
END;
/

CREATE OR REPLACE FUNCTION FN_PACIENTE_TIENE_CITAS(p_id_paciente IN NUMBER) RETURN NUMBER IS v_cnt NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM CITA WHERE ID_PACIENTE=p_id_paciente;
  RETURN CASE WHEN v_cnt>0 THEN 1 ELSE 0 END;
END;
/

CREATE OR REPLACE FUNCTION FN_CONTAR_ESPECIALIDADES RETURN NUMBER IS v_cnt NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM ESPECIALIDAD;
  RETURN v_cnt;
END;
/

CREATE OR REPLACE FUNCTION FN_CONTAR_PACIENTES RETURN NUMBER IS v_cnt NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM PACIENTE;
  RETURN v_cnt;
END;
/

CREATE OR REPLACE FUNCTION FN_CONTAR_HISTORIALES RETURN NUMBER IS v_cnt NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_cnt FROM HISTORIAL_MEDICO;
  RETURN v_cnt;
END;
/

CREATE OR REPLACE FUNCTION FN_NOMBRE_PACIENTE(p_id IN NUMBER) RETURN VARCHAR2 IS v_nom PACIENTE.NOMBRE%TYPE;
BEGIN
  SELECT NOMBRE INTO v_nom FROM PACIENTE WHERE ID_PACIENTE=p_id;
  RETURN v_nom;
EXCEPTION WHEN NO_DATA_FOUND THEN RETURN NULL;
END;
/

CREATE OR REPLACE FUNCTION FN_FORMATEAR_NOMBRE_PACIENTE(p_id IN NUMBER) RETURN VARCHAR2 IS v_nom VARCHAR2(200);
BEGIN
  SELECT NOMBRE INTO v_nom FROM PACIENTE WHERE ID_PACIENTE=p_id;
  RETURN INITCAP(v_nom);
EXCEPTION WHEN NO_DATA_FOUND THEN RETURN NULL;
END;
/

 /* ============================================================================
    9) SINCRONIZACIÓN DE SECUENCIAS (opcional tras cargas previas)
    ============================================================================ */
DECLARE
  PROCEDURE sync_seq(p_seq VARCHAR2, p_table VARCHAR2, p_col VARCHAR2) IS
    v_target NUMBER; v_curr NUMBER; v_inc NUMBER;
  BEGIN
    EXECUTE IMMEDIATE 'SELECT NVL(MAX('||p_col||'),0)+1 FROM '||p_table INTO v_target;
    EXECUTE IMMEDIATE 'SELECT '||p_seq||'.NEXTVAL FROM DUAL' INTO v_curr;
    IF v_curr < v_target THEN
      v_inc := v_target - v_curr;
      EXECUTE IMMEDIATE 'ALTER SEQUENCE '||p_seq||' INCREMENT BY '||v_inc;
      EXECUTE IMMEDIATE 'SELECT '||p_seq||'.NEXTVAL FROM DUAL' INTO v_curr;
      EXECUTE IMMEDIATE 'ALTER SEQUENCE '||p_seq||' INCREMENT BY 1';
    END IF;
  END;
BEGIN
  sync_seq('SEQ_ESPECIALIDAD','ESPECIALIDAD','ID_ESPECIALIDAD');
  sync_seq('SEQ_DOCTOR','DOCTOR','ID_DOCTOR');
  sync_seq('SEQ_PACIENTE','PACIENTE','ID_PACIENTE');
  sync_seq('SEQ_DISPONIBILIDAD','DISPONIBILIDAD','ID_DISPONIBILIDAD');
  sync_seq('SEQ_CITA','CITA','ID_CITA');
  sync_seq('SEQ_HISTORIAL','HISTORIAL_MEDICO','ID_HISTORIAL');
  sync_seq('SEQ_PAGO','PAGO','ID_PAGO');
  sync_seq('SEQ_USUARIO','USUARIO','ID_USUARIO');
  sync_seq('SEQ_RECORDATORIO','RECORDATORIO','ID_RECORDATORIO');
END;
/
 
 /* ============================================================================
    10) RECOMPILACIÓN + DIAGNÓSTICOS
    ============================================================================ */
BEGIN
  DBMS_UTILITY.compile_schema(schema => USER, compile_all => FALSE);
END;
/

PROMPT == OBJETOS INVÁLIDOS ==
COLUMN object_type FORMAT A22
COLUMN object_name FORMAT A35
SELECT object_type, object_name, status
  FROM user_objects
 WHERE status <> 'VALID'
 ORDER BY object_type, object_name;
/

PROMPT == ERRORES DE COMPILACIÓN ==
COLUMN name FORMAT A35
COLUMN text FORMAT A120
SELECT name, type, line, position, text
  FROM user_errors
 ORDER BY name, sequence;
/
