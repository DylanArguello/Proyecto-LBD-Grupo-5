
/*Tabla de Espacialidad*/
CREATE TABLE ESPECIALIDAD (
    ID_ESPECIALIDAD NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL
);

/*Crud de Tabla de Especialidad*/

-- CREAR ESPECIALIDAD
INSERT INTO ESPECIALIDAD (ID_ESPECIALIDAD, NOMBRE)
VALUES (:ID_ESPECIALIDAD, :NOMBRE);

-- CONSULTAR TODAS LAS ESPECIALIDADES
SELECT ID_ESPECIALIDAD, NOMBRE
FROM ESPECIALIDAD
ORDER BY NOMBRE;

-- CONSULTAR UNA ESPECIALIDAD POR ID
SELECT ID_ESPECIALIDAD, NOMBRE
FROM ESPECIALIDAD
WHERE ID_ESPECIALIDAD = :ID_ESPECIALIDAD;

-- ACTUALIZAR ESPECIALIDAD
UPDATE ESPECIALIDAD
SET NOMBRE = :NOMBRE
WHERE ID_ESPECIALIDAD = :ID_ESPECIALIDAD;

-- ELIMINAR ESPECIALIDAD
DELETE FROM ESPECIALIDAD
WHERE ID_ESPECIALIDAD = :ID_ESPECIALIDAD;

/*Tabla de Doctor*/

CREATE TABLE DOCTOR (
    ID_DOCTOR NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    TELEFONO VARCHAR2(20),
    ID_ESPECIALIDAD NUMBER,
    FOREIGN KEY (ID_ESPECIALIDAD) REFERENCES ESPECIALIDAD(ID_ESPECIALIDAD)
);
/*Crud de Tabla de Doctror*/

-- CREAR DOCTOR
INSERT INTO DOCTOR (ID_DOCTOR, NOMBRE, TELEFONO, ID_ESPECIALIDAD)
VALUES (:ID_DOCTOR, :NOMBRE, :TELEFONO, :ID_ESPECIALIDAD);

-- LISTAR TODOS LOS DOCTORES
SELECT D.ID_DOCTOR, D.NOMBRE, D.TELEFONO, E.NOMBRE AS ESPECIALIDAD
FROM DOCTOR D
JOIN ESPECIALIDAD E ON D.ID_ESPECIALIDAD = E.ID_ESPECIALIDAD
ORDER BY D.NOMBRE;

-- OBTENER DETALLE DE UN DOCTOR
SELECT ID_DOCTOR, NOMBRE, TELEFONO, ID_ESPECIALIDAD
FROM DOCTOR
WHERE ID_DOCTOR = :ID_DOCTOR;

-- ACTUALIZAR DATOS DEL DOCTOR
UPDATE DOCTOR
SET NOMBRE = :NOMBRE,
    TELEFONO = :TELEFONO,
    ID_ESPECIALIDAD = :ID_ESPECIALIDAD
WHERE ID_DOCTOR = :ID_DOCTOR;

-- ELIMINAR DOCTOR
DELETE FROM DOCTOR
WHERE ID_DOCTOR = :ID_DOCTOR;


/*Tabla de Paciente*/
CREATE TABLE PACIENTE (
    ID_PACIENTE NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) UNIQUE,
    TELEFONO VARCHAR2(20),
    DIRECCION VARCHAR2(255)
);
/*Crud de Tabla de Paciente*/
-- REGISTRAR PACIENTE
INSERT INTO PACIENTE (ID_PACIENTE, NOMBRE, EMAIL, TELEFONO, DIRECCION)
VALUES (:ID_PACIENTE, :NOMBRE, :EMAIL, :TELEFONO, :DIRECCION);

-- LISTAR PACIENTES
SELECT ID_PACIENTE, NOMBRE, EMAIL, TELEFONO, DIRECCION
FROM PACIENTE
ORDER BY NOMBRE;

-- CONSULTAR PACIENTE POR ID
SELECT *
FROM PACIENTE
WHERE ID_PACIENTE = :ID_PACIENTE;

-- MODIFICAR PACIENTE
UPDATE PACIENTE
SET NOMBRE = :NOMBRE,
    EMAIL = :EMAIL,
    TELEFONO = :TELEFONO,
    DIRECCION = :DIRECCION
WHERE ID_PACIENTE = :ID_PACIENTE;

-- ELIMINAR PACIENTE
DELETE FROM PACIENTE
WHERE ID_PACIENTE = :ID_PACIENTE;


/*Tabla de Disponibilidad*/
CREATE TABLE DISPONIBILIDAD (
    ID_DISPONIBILIDAD NUMBER PRIMARY KEY,
    ID_DOCTOR NUMBER,
    DIA_SEMANA VARCHAR2(10),
    HORA_INICIO DATE,
    HORA_FIN DATE,
    FOREIGN KEY (ID_DOCTOR) REFERENCES DOCTOR(ID_DOCTOR)
);

/*Crud de Tabla de Disponibilidad*/
-- CREAR DISPONIBILIDAD PARA UN DOCTOR
INSERT INTO DISPONIBILIDAD (ID_DISPONIBILIDAD, ID_DOCTOR, DIA_SEMANA, HORA_INICIO, HORA_FIN)
VALUES (:ID_DISPONIBILIDAD, :ID_DOCTOR, :DIA_SEMANA, :HORA_INICIO, :HORA_FIN);

-- LISTAR TODAS LAS DISPONIBILIDADES
SELECT D.ID_DISPONIBILIDAD, DR.NOMBRE AS DOCTOR, D.DIA_SEMANA, D.HORA_INICIO, D.HORA_FIN
FROM DISPONIBILIDAD D
JOIN DOCTOR DR ON D.ID_DOCTOR = DR.ID_DOCTOR
ORDER BY DR.NOMBRE, D.DIA_SEMANA;

-- CONSULTAR DISPONIBILIDAD POR ID
SELECT * FROM DISPONIBILIDAD WHERE ID_DISPONIBILIDAD = :ID_DISPONIBILIDAD;

-- ACTUALIZAR DISPONIBILIDAD
UPDATE DISPONIBILIDAD
SET DIA_SEMANA = :DIA_SEMANA,
    HORA_INICIO = :HORA_INICIO,
    HORA_FIN = :HORA_FIN
WHERE ID_DISPONIBILIDAD = :ID_DISPONIBILIDAD;

-- ELIMINAR DISPONIBILIDAD
DELETE FROM DISPONIBILIDAD WHERE ID_DISPONIBILIDAD = :ID_DISPONIBILIDAD;

/*Tabla de Cita*/
CREATE TABLE CITA (
    ID_CITA NUMBER PRIMARY KEY,
    ID_PACIENTE NUMBER,
    ID_DOCTOR NUMBER,
    FECHA DATE NOT NULL,
    HORA DATE NOT NULL,
    ESTADO VARCHAR2(20), -- 'AGENDADA', 'CONFIRMADA', 'CANCELADA', etc.
    FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTE(ID_PACIENTE),
    FOREIGN KEY (ID_DOCTOR) REFERENCES DOCTOR(ID_DOCTOR)
);

/*Crud de Tabla de Cita*/

-- AGENDAR CITA
INSERT INTO CITA (ID_CITA, ID_PACIENTE, ID_DOCTOR, FECHA, HORA, ESTADO)
VALUES (:ID_CITA, :ID_PACIENTE, :ID_DOCTOR, :FECHA, :HORA, :ESTADO);

-- VER LISTADO DE CITAS
SELECT C.ID_CITA, P.NOMBRE AS PACIENTE, D.NOMBRE AS DOCTOR, C.FECHA, C.HORA, C.ESTADO
FROM CITA C
JOIN PACIENTE P ON C.ID_PACIENTE = P.ID_PACIENTE
JOIN DOCTOR D ON C.ID_DOCTOR = D.ID_DOCTOR
ORDER BY C.FECHA, C.HORA;

-- DETALLE DE CITA
SELECT * FROM CITA WHERE ID_CITA = :ID_CITA;

-- ACTUALIZAR CITA
UPDATE CITA
SET ID_PACIENTE = :ID_PACIENTE,
    ID_DOCTOR = :ID_DOCTOR,
    FECHA = :FECHA,
    HORA = :HORA,
    ESTADO = :ESTADO
WHERE ID_CITA = :ID_CITA;

-- CANCELAR O ELIMINAR CITA
DELETE FROM CITA WHERE ID_CITA = :ID_CITA;


/*Tabla de Historial Medico */
CREATE TABLE Historial_MEDICO (
    ID_Historial NUMBER PRIMARY KEY,
    ID_PACIENTE NUMBER,
    ID_CITA NUMBER,
    DIAGNOSTICO VARCHAR2(500),
    TRATAMIENTO VARCHAR2(500),
    FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTE(ID_PACIENTE),
    FOREIGN KEY (ID_CITA) REFERENCES CITA(ID_CITA)
);
/*Crud de Tabla de Historial Medico*/

-- CREAR REGISTRO MÃ‰DICO
INSERT INTO Historial_MEDICO (ID_Historial, ID_PACIENTE, ID_CITA, DIAGNOSTICO, TRATAMIENTO)
VALUES (:ID_Historial, :ID_PACIENTE, :ID_CITA, :DIAGNOSTICO, :TRATAMIENTO);

-- CONSULTAR Historial POR PACIENTE
SELECT * FROM Historial_MEDICO WHERE ID_PACIENTE = :ID_PACIENTE;

-- CONSULTAR Historial POR CITA
SELECT * FROM Historial_MEDICO WHERE ID_CITA = :ID_CITA;

-- ACTUALIZAR Historial
UPDATE Historial_MEDICO
SET DIAGNOSTICO = :DIAGNOSTICO,
    TRATAMIENTO = :TRATAMIENTO
WHERE ID_Historial = :ID_Historial;

-- ELIMINAR Historial
DELETE FROM Historial_MEDICO WHERE ID_Historial = :ID_Historial;


/*Tabla de Pago */
CREATE TABLE PAGO (
    ID_PAGO NUMBER PRIMARY KEY,
    ID_CITA NUMBER,
    MONTO NUMBER(10, 2),
    FECHA DATE,
    METODO_PAGO VARCHAR2(50),
    FOREIGN KEY (ID_CITA) REFERENCES CITA(ID_CITA)
);

/*Crud de Tabla de Pago*/

-- REGISTRAR PAGO DE UNA CITA
INSERT INTO PAGO (ID_PAGO, ID_CITA, MONTO, FECHA, METODO_PAGO)
VALUES (:ID_PAGO, :ID_CITA, :MONTO, :FECHA, :METODO_PAGO);

-- LISTAR PAGOS CON DETALLE DE PACIENTE
SELECT P.ID_PAGO, C.ID_CITA, PAC.NOMBRE AS PACIENTE, P.MONTO, P.FECHA, P.METODO_PAGO
FROM PAGO P
JOIN CITA C ON P.ID_CITA = C.ID_CITA
JOIN PACIENTE PAC ON C.ID_PACIENTE = PAC.ID_PACIENTE
ORDER BY P.FECHA DESC;

-- CONSULTAR PAGO POR ID
SELECT * FROM PAGO WHERE ID_PAGO = :ID_PAGO;

-- ACTUALIZAR PAGO
UPDATE PAGO
SET MONTO = :MONTO,
    FECHA = :FECHA,
    METODO_PAGO = :METODO_PAGO
WHERE ID_PAGO = :ID_PAGO;

-- ELIMINAR PAGO
DELETE FROM PAGO WHERE ID_PAGO = :ID_PAGO;


/*Tabla de Usuario*/
CREATE TABLE USUARIO (
    ID_USUARIO NUMBER PRIMARY KEY,
    NOMBRE_USUARIO VARCHAR2(50) UNIQUE NOT NULL,
    CONTRASENA VARCHAR2(255) NOT NULL,
    TIPO_USUARIO VARCHAR2(20) -- 'ADMIN', 'PACIENTE', 'DOCTOR'
);

/*Crud de Tabla de Usuario*/

-- CREAR USUARIO (PACIENTE, DOCTOR O ADMIN)
INSERT INTO USUARIO (ID_USUARIO, NOMBRE_USUARIO, CONTRASENA, TIPO_USUARIO)
VALUES (:ID_USUARIO, :NOMBRE_USUARIO, :CONTRASENA, :TIPO_USUARIO);

-- LISTAR USUARIOS
SELECT ID_USUARIO, NOMBRE_USUARIO, TIPO_USUARIO
FROM USUARIO
ORDER BY NOMBRE_USUARIO;

-- CONSULTAR USUARIO POR ID
SELECT * FROM USUARIO WHERE ID_USUARIO = :ID_USUARIO;

-- ACTUALIZAR DATOS DE USUARIO
UPDATE USUARIO
SET NOMBRE_USUARIO = :NOMBRE_USUARIO,
    CONTRASENA = :CONTRASENA,
    TIPO_USUARIO = :TIPO_USUARIO
WHERE ID_USUARIO = :ID_USUARIO;

-- ELIMINAR USUARIO
DELETE FROM USUARIO WHERE ID_USUARIO = :ID_USUARIO;


/*Tabla de Recordatorio*/
CREATE TABLE RECORDATORIO (
    ID_RECORDATORIO NUMBER PRIMARY KEY,
    ID_CITA NUMBER,
    MENSAJE VARCHAR2(255),
    FECHA_ENVIO DATE,
    FOREIGN KEY (ID_CITA) REFERENCES CITA(ID_CITA)
);

/*Crud de Tabla de Recordatorio*/

-- CREAR RECORDATORIO PARA UNA CITA
INSERT INTO RECORDATORIO (ID_RECORDATORIO, ID_CITA, MENSAJE, FECHA_ENVIO)
VALUES (:ID_RECORDATORIO, :ID_CITA, :MENSAJE, :FECHA_ENVIO);

-- LISTAR RECORDATORIOS CON CITA Y PACIENTE
SELECT R.ID_RECORDATORIO, R.MENSAJE, R.FECHA_ENVIO, P.NOMBRE AS PACIENTE, C.FECHA, C.HORA
FROM RECORDATORIO R
JOIN CITA C ON R.ID_CITA = C.ID_CITA
JOIN PACIENTE P ON C.ID_PACIENTE = P.ID_PACIENTE
ORDER BY R.FECHA_ENVIO DESC;

-- CONSULTAR RECORDATORIO POR ID
SELECT * FROM RECORDATORIO WHERE ID_RECORDATORIO = :ID_RECORDATORIO;

-- ACTUALIZAR MENSAJE O FECHA
UPDATE RECORDATORIO
SET MENSAJE = :MENSAJE,
    FECHA_ENVIO = :FECHA_ENVIO
WHERE ID_RECORDATORIO = :ID_RECORDATORIO;

-- ELIMINAR RECORDATORIO
DELETE FROM RECORDATORIO WHERE ID_RECORDATORIO = :ID_RECORDATORIO;


--------------------------------------------------------------------
-------------------VISTAS DE LA BASE DE DATOS-----------------------
--------------------------------------------------------------------

--1. Vista Agenda de citas

CREATE VIEW V_CITAS AS 
SELECT
    C.ID_CITA,
    P.NOMBRE AS "NOMBRE PACIENTE",
    D.NOMBRE AS "NOMBRE DOCTOR",
    E.NOMBRE AS ESPECIALIDAD,
    C.FECHA,
    C.HORA,
    C.ESTADO
FROM CITA C
INNER JOIN PACIENTE P ON C.ID_PACIENTE = P.ID_PACIENTE
INNER JOIN DOCTOR D ON C.ID_DOCTOR = D.ID_DOCTOR
LEFT JOIN ESPECIALIDAD E ON D.ID_ESPECIALIDAD = E.ID_ESPECIALIDAD
ORDER BY P.NOMBRE, C.FECHA, C.HORA;

-- 2. Vista Historial de Paciente

CREATE VIEW V_Historial AS 
SELECT
    H.ID_Historial,
    P.NOMBRE AS PACIENTE,
    C.FECHA,
    D.NOMBRE AS MEDICO,
    H.DIAGNOSTICO,
    H.TRATAMIENTO
FROM Historial_MEDICO H
INNER JOIN PACIENTE P ON H.ID_PACIENTE = P.ID_PACIENTE
INNER JOIN CITA C ON H.ID_CITA = C.ID_CITA
INNER JOIN DOCTOR D ON C.ID_DOCTOR = D.ID_DOCTOR;

-- 3. Vista Pagos Detallados

CREATE VIEW V_PAGOS AS 
SELECT
    PAG.ID_PAGO,
    P.NOMBRE AS PACIENTE,
    PAG.MONTO,
    PAG.FECHA,
    PAG.METODO_PAGO
FROM PAGO PAG
INNER JOIN CITA C ON PAG.ID_CITA = C.ID_CITA
INNER JOIN PACIENTE P ON C.ID_PACIENTE = P.ID_PACIENTE;

-- 4. Vista Disponibilidad de Doctores

CREATE VIEW V_DISPONIBILIDAD_DOCTOR AS
SELECT
    DISP.ID_DISPONIBILIDAD,
    D.NOMBRE AS DOCTOR,
    E.NOMBRE AS ESPECIALIDAD,
    DISP.DIA_SEMANA,
    TO_CHAR(DISP.HORA_INICIO, 'HH24:MI') AS HORA_INICIO,
    TO_CHAR(DISP.HORA_FIN, 'HH24:MI') AS HORA_FIN
FROM DISPONIBILIDAD DISP
INNER JOIN DOCTOR D ON DISP.ID_DOCTOR = D.ID_DOCTOR
LEFT JOIN ESPECIALIDAD E ON D.ID_ESPECIALIDAD = E.ID_ESPECIALIDAD;

-- 5. Vista Recordatorios de Citas
CREATE VIEW V_RECORDATORIOS_CITAS AS
SELECT
    R.ID_RECORDATORIO,
    C.ID_CITA,
    P.NOMBRE AS PACIENTE,
    C.FECHA,
    C.HORA,
    R.MENSAJE,
    R.FECHA_ENVIO
FROM RECORDATORIO R
INNER JOIN CITA C ON R.ID_CITA = C.ID_CITA
INNER JOIN PACIENTE P ON C.ID_PACIENTE = P.ID_PACIENTE
INNER JOIN DOCTOR D ON C.ID_DOCTOR = D.ID_DOCTOR
LEFT JOIN ESPECIALIDAD E ON D.ID_ESPECIALIDAD = E.ID_ESPECIALIDAD
ORDER BY R.FECHA_ENVIO DESC;


-- 6. Vista de Usuarios
CREATE VIEW V_USUARIOS AS
SELECT
    U.ID_USUARIO,
    U.NOMBRE_USUARIO,
    U.TIPO_USUARIO,
    CASE 
        WHEN U.TIPO_USUARIO = 'PACIENTE' THEN P.NOMBRE
        WHEN U.TIPO_USUARIO = 'DOCTOR' THEN D.NOMBRE
        ELSE NULL
    END AS NOMBRE_PERSONA
FROM USUARIO U
LEFT JOIN PACIENTE P ON U.ID_USUARIO = P.ID_PACIENTE
LEFT JOIN DOCTOR D ON U.ID_USUARIO = D.ID_DOCTOR
WHERE U.TIPO_USUARIO IN ('PACIENTE', 'DOCTOR')
ORDER BY U.NOMBRE_USUARIO;

-- 7. Vista de Especialidades
CREATE VIEW V_ESPECIALIDADES AS
SELECT
    E.ID_ESPECIALIDAD,
    E.NOMBRE AS ESPECIALIDAD,
    COUNT(D.ID_DOCTOR) AS NUM_DOCTORES
FROM ESPECIALIDAD E
LEFT JOIN DOCTOR D ON E.ID_ESPECIALIDAD = D.ID_ESPECIALIDAD
GROUP BY E.ID_ESPECIALIDAD, E.NOMBRE
ORDER BY E.NOMBRE;

-- 8. Vista de Doctores con Especialidad
CREATE VIEW V_DOCTORES_ESPECIALIDAD AS
SELECT
    D.ID_DOCTOR,
    D.NOMBRE AS DOCTOR,
    E.NOMBRE AS ESPECIALIDAD,
    D.TELEFONO 
FROM DOCTOR D
LEFT JOIN ESPECIALIDAD E ON D.ID_ESPECIALIDAD = E.ID_ESPECIALIDAD
ORDER BY D.NOMBRE;

-- 9. Vista de Citas por Doctor    
CREATE VIEW V_CITAS_POR_DOCTOR AS
SELECT
    D.ID_DOCTOR,
    D.NOMBRE AS DOCTOR,
    COUNT(C.ID_CITA) AS NUM_CITAS,
    SUM(CASE WHEN C.ESTADO = 'CONFIRMADA' THEN 1 ELSE 0 END) AS CITAS_CONFIRMADAS,
    SUM(CASE WHEN C.ESTADO = 'CANCELADA' THEN 1 ELSE 0 END) AS CITAS_CANCELADAS
FROM DOCTOR D
LEFT JOIN CITA C ON D.ID_DOCTOR = C.ID_DOCTOR
GROUP BY D.ID_DOCTOR, D.NOMBRE
ORDER BY D.NOMBRE;

-- 10. Vista de Pagos por Paciente

CREATE OR REPLACE VIEW V_PAGOS_PACIENTE AS
SELECT
    P.ID_PACIENTE,
    P.NOMBRE AS PACIENTE,
    COUNT(PAG.ID_PAGO) AS NUM_PAGOS,
    COALESCE(SUM(PAG.MONTO), 0) AS TOTAL_PAGADO
FROM PACIENTE P
LEFT JOIN CITA C ON P.ID_PACIENTE = C.ID_PACIENTE
LEFT JOIN PAGO PAG ON C.ID_CITA = PAG.ID_CITA
GROUP BY P.ID_PACIENTE, P.NOMBRE
ORDER BY P.NOMBRE;









